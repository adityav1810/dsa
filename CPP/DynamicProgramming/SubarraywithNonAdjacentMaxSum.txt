#include <bits/stdc++.h> 


int solve(vector<int> &nums,int n,vector<int> &dp){
        // base case 
    if(n==0){
        dp[0] =nums[0];
    }
    if(n<0){
        return 0;
    }
    if(dp[n]!=-1){
        return dp[n];
    }
    // include or exclude
    int include = solve(nums,n-2,dp)+ nums[n];
    int exclude = solve(nums,n-1,dp);

    // step 2 : add to dp

    dp[n] =  max(include,exclude);
    return dp[n];

}
int solveBottomUp(vector<int> &nums){
    int n = nums.size();
    vector<int> dp(n,0);
    dp[0] = nums[0];
    for(int i = 1; i<n;i++){
        int include = dp[i-2] + nums[i];
        int exclude = dp[i-1];
        dp[i] = max(include,exclude);

    }
    return dp[n-1];
}


int maximumNonAdjacentSum(vector<int> &nums){

    // Create DP array
    vector<int> dp(nums.size() + 1,-1);
return solveBottomUp(nums);

}