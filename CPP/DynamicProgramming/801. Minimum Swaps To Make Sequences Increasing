class Solution {
public:
    int solve(int idx, int n, vector<int>& nums1, vector<int>& nums2,int swaps,vector<vector<int>> &dp){
        if(idx ==n){
            return 0;
        }
        int ans = INT_MAX;
        int p1 = nums1[idx-1];
        int p2 = nums2[idx-1];

        // Swap
        if(swaps){
            swap(p1,p2);
        }
        if(dp[idx][swaps]!=-1){
            return dp[idx][swaps];
        }

        // No Swap
        if(nums1[idx] > p1 && nums2[idx] > p2){
            ans = solve(idx+1,n,nums1,nums2,0,dp);
        }
        if(nums1[idx] > p2 && nums2[idx] > p1){
            ans = min(ans,1+solve(idx+1,n,nums1,nums2,1,dp));
        }
        dp[idx][swaps] = ans;
        return dp[idx][swaps];

        
    }



    int solveTab(vector<int>& nums1, vector<int>& nums2){
        int n= nums1.size();
        int swaps = 0;
        vector<vector<int>> dp (n+1,vector<int>(2,0));




        for(int idx=n-1;idx>=1;idx--){
            for(int swaps = 1; swaps>=0;swaps--)
            {
                        int ans = INT_MAX;
        int p1 = nums1[idx-1];
        int p2 = nums2[idx-1];
                if(swaps){
            swap(p1,p2);
                }
            if(nums1[idx] > p1 && nums2[idx] > p2){
            ans = dp[idx+1][0];
        }
        if(nums1[idx] > p2 && nums2[idx] > p1){
            ans = min(ans,1+dp[idx+1][1]);
        }
        dp[idx][swaps] = ans;
        }

            }
        
        return dp[1][0];



    }






    int minSwap(vector<int>& nums1, vector<int>& nums2) {
        nums1.insert(nums1.begin(),-1);
        nums2.insert(nums2.begin(),-1);
        // int n= nums1.size();
        // int swaps = 0;
        // vector<vector<int>> dp (n+1,vector<int>(2,-1));
        // return solve(1,n,nums1,nums2,0,dp);
        return solveTab(nums1,nums2);

        
    }
};